{"meta":{"title":"GaryLz","subtitle":"Footprints - \"keep curiosity as a child\"","description":"Digest, Reflection, Sharing","author":"Gary.Leung","url":"http://yoursite.com","root":"/"},"pages":[{"title":"about","date":"2019-03-17T12:52:38.000Z","updated":"2020-01-27T06:03:18.564Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"Hello, Lucky one, welcome to my blog. I&apos;m Gary, a student from China. The very frist of impulse I setting up this site, is to *sharing* something with myself.(i.e.learning, thoughts, ideas, and moods). In some ways, letting you knows a little about me, even though you didn&apos;t know me at all. Whatsoever, just pretend that it&apos;s for one guy to talk to himself like a diary. It&apos;s worth recording, especially for myself. Anyway, just like a quote I give to myself, Keep curious just like a child. ---大家好， 想必大家可能知道我是谁。 欢迎大家来到我的博客。/骄傲脸 建立这个博客，前前后后折腾了大概大半年时间。 之所以建立这个博客，是因为如今生活太过嘈杂焦虑。想有个地方，时常安静地写些东西，无聊低落时随时随地都可以看到——原来自己也挺不错。/毕竟自己内心还是个喜好安静的人。 在这里，我时常分享一些关于自己的一些杂七杂八。（更多地关于学习的总结。） 一个记录自己一点一滴的小站。 written by Gary, night, Apr.3rd,19"},{"title":"categories","date":"2019-03-17T12:53:54.000Z","updated":"2020-01-27T06:03:18.564Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":"CS overview on my mojor field skills I’ve picked up algrithms survival-git manual (先挖坑儿) … English Poems … book digests (critically serious) Life booklist movielist playlist of songs hobby, useful skills Self my own framework of Priciple&amp;Rules coverage&amp;refinement- how to do a deduction and compression. like zhihu, evernote, pocket(facing info-overwhelming era) ####Apr.6-7th to-do list the algorithms of the first 4 chapters git reflections on the first month of this semester at school. critical reviews as to some favorable documentaries. a summary or report on my ideal development"},{"title":"tags","date":"2019-03-17T12:56:16.000Z","updated":"2020-01-27T06:03:18.565Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":"Poems Algorithms"}],"posts":[{"title":"2020","slug":"2020","date":"2020-03-14T06:58:46.000Z","updated":"2020-03-15T17:25:58.756Z","comments":true,"path":"2020/03/14/2020/","link":"","permalink":"http://yoursite.com/2020/03/14/2020/","excerpt":"2020送给自己的第一句话 2020， 注定是未来十年中绝不平常的一年 从2019， 再到2020，一年过去了。","text":"2020送给自己的第一句话 2020， 注定是未来十年中绝不平常的一年 从2019， 再到2020，一年过去了。 个人也非常感慨—— 自己，从一个啥事都非常好奇，凭着一腔热情瞎折腾，再到现在，凡事思前想后，生怕走错路的自己。 那年的热情不在，只留下苍白无力的现实。 2020年，开局不利。Cornorvirus outbreak, market crash, Kobe Bryant passed away, so on… Maybe I could be one of the jobless.(the US is in the best of the history, or China is stuck in economy slowdown.) So sad but that is life.","categories":[],"tags":[]},{"title":"How Do I Love Thee","slug":"How-Do-I-Love-Thee","date":"2019-04-03T13:45:25.000Z","updated":"2020-01-27T06:03:18.564Z","comments":true,"path":"2019/04/03/How-Do-I-Love-Thee/","link":"","permalink":"http://yoursite.com/2019/04/03/How-Do-I-Love-Thee/","excerpt":"How Do I Love Thee written by Elizabeth Barrett Browning How do I love thee? Let me count the ways.","text":"How Do I Love Thee written by Elizabeth Barrett Browning How do I love thee? Let me count the ways. I love Thee to the depth and breath and height my Soul can reach,when feeling out of Sight, for the ends of Being and ideal Grace. I love thee to the level of everyday’s Most quiet need, by sun and candlelight. I love thee freely, as men strive for Right; I love thee purely, as they turn from Praise. I love thee with the Passion put to use in my old griefs, and with my childhood’s faith. I love thee with a love I seemed to lose with my lost saints, I love thee with the breath, smiles, tears, of all my life and, if God choose, I shall but love thee better after death.","categories":[],"tags":[]},{"title":"Charlie's Last Letter","slug":"Charlie-s-Last-Letter","date":"2019-03-23T02:44:35.000Z","updated":"2020-01-27T06:03:18.563Z","comments":true,"path":"2019/03/23/Charlie-s-Last-Letter/","link":"","permalink":"http://yoursite.com/2019/03/23/Charlie-s-Last-Letter/","excerpt":"Charlie’s Last Letter from MOVIE The Perks Of Being A Wallflower I don’t know if I will have the time to write any more letters. Because I might be too busy trying to paticipate.","text":"Charlie’s Last Letter from MOVIE The Perks Of Being A Wallflower I don’t know if I will have the time to write any more letters. Because I might be too busy trying to paticipate. So, it this does end up being the last letter. I just want to tell you that I was in a bad place before I started high school And you helped me. Even if you didn’t know what I was talking about or know someone who’s gone through it And it made me not feel alone. Because I know there’re people who say all these things don’t happen there’re people who forget what it’s like to be 16when they turn 17. I know these will be all stories someday, And our picutures will become old photograph,s And we all will become someone’s mom or dad. But right now, these moments are not stories. This is happening. I’m here, and I’m looking at her. And she’s so beautiful. … I can see it, the one moment when you know you are not a sad stories, You’re alive. And you stand up and look at the lights on the building and everything that makes you wonder. And you were listening to that song on that drive with people you love most in this world. And in this moment, I swear, We are infinite.","categories":[],"tags":[{"name":"Poems","slug":"Poems","permalink":"http://yoursite.com/tags/Poems/"}]},{"title":"Algorithms of dynamic Sequential List","slug":"Algorithms-of-dynamic-Sequential-List","date":"2019-03-19T02:35:26.000Z","updated":"2020-01-27T06:03:18.563Z","comments":true,"path":"2019/03/19/Algorithms-of-dynamic-Sequential-List/","link":"","permalink":"http://yoursite.com/2019/03/19/Algorithms-of-dynamic-Sequential-List/","excerpt":"线性表顺序结构-动态to declare1234567891011#define LIST_INIT_SIZE 10;#define LIST_INCREMENT 5;//array can't apply for a new capacity//once it was defined.typedef struct &#123; DataList *data; int length; int datasize //to note the current capacity that has been occupied. // to judge if apply for a new capacity if it's full. &#125; SeqList","text":"线性表顺序结构-动态to declare1234567891011#define LIST_INIT_SIZE 10;#define LIST_INCREMENT 5;//array can't apply for a new capacity//once it was defined.typedef struct &#123; DataList *data; int length; int datasize //to note the current capacity that has been occupied. // to judge if apply for a new capacity if it's full. &#125; SeqList 1. to initialize123456789int initList(SeqList &amp;L)&#123;//initialize memory allocation L.data = (DataList*)molloc(LIST_INIT_SIZE * sizeof(DataList)); if(!L.data) exit(0); L.length = 0; L.datasize = LIST_INIT_SIZE; return 0; //succeeded &#125; 2. to destroy all of member variables and recycle123456int destroyList(SeqList &amp;L)&#123; free(L.data); L.length = 0; L.datasize = 0; return 1;&#125; 3. to recyclethe process is the same as the above 4. to check if it’s empty123int checkEmpty(SeqList L)&#123; return !(L.length);&#125; 5. to get the length of the list123int getLength(SeqList L)&#123; return L.length;&#125; 6. to return the value of the n-th element123456DataList getElem(SeqList L, int n)&#123; if ( n &lt; 1 || n &gt; L.length ) return NULL; //you also can only consider the feasible situation return (*(L.data+i-1))&#125; 7. to return the index(AKA situation) of the given numberif it’s in the list, if succeed return 1, or return 0 1234567891011int getLocation(SeqList L, int num)&#123; if ( data &amp;&amp; L.length != 0 )&#123; //to ensure that pointer(data) or the list is not NULL int j;//default j=0; // to check if that given number is in the list while ( j &lt; L.length &amp;&amp; num != (*(data+j) ) j++; if ( j != L.length) return j; else return -1; &#125;else return -1;&#125; 8. to get the value of its immediate successorif it exits by giving values 1234567891011DataList getI_suc(SeqList L, DataList values )&#123; if ( data &amp;&amp; L.length != 0 )&#123; int j; while ( j &lt; L.length-1 &amp;&amp; values != (*(L.data+j))) j++; if ( j ! = L.length-1) return (*(L.data+j+1)); &#125; return NULL;&#125; 9. to get…the value of its predecessor12345678910DataList getI_prede(SeqList L, DataList value)&#123; if ( L.data &amp;&amp; L.length != 0 )&#123; int j = 1; while ( j &lt; L.length &amp;&amp; values != (*(L.data+j))) j++; if ( j != L.length ) return (*(L.data+j-1)); &#125; return NULL;&#125; 10. ATTENTIONinsert a given value before an expected element of the list 123456789101112131415161718192021222324252627282930313233343536int insertBef(SeqList &amp;L, DataList value, int i)&#123; //need to note here, applying for a new room for the value if feasible** if ( !L.data || L.length = 0 || i &lt; 1 || i &gt; L.length ) return -1; DataList *newbase, *q, *p; //p,q that two being used into operation of putting backward other elements //need to note here - function remolloc() just change its memory size(AKA resize the memory block), doesn't change its values that inside the original memory. //check if the block of memory is full now if ( L.length == L.datasize )&#123; //L.length --&gt; means the size of memory using now newbase = (DataList*)remolloc(L.data, (L.datasize + LIST_INCREMENT)*(sizeof(DataList))); //apply for room for value to be saved //what if failing to allocate the requested memory block, a null pointer is returned //appendix - dereference means “取指针所指向的对象的值” in Chinese. (AKA star sign(*)) if ( !newbase ) exit(0); //terminate in advance ##reallyUsefulTrick## //on success L.datasize += LIST_INCREMENT; L.data = newbase; //new address &#125; //expected element and those behind need to move backwards, //the process starts with the last one. //NOTE: why need two pointers like p, q. // because all elements need being pointed by pointers. //so, we need two to deal with the process of offering a room for that value waiting to insert // and one of both to point that empty room q = L.data+i-1; //let the pointer q point to that room(by passing on the address) for ( p = L.data+L.length-1; p &gt; i; --p )&#123; *(p+1) = *p; //moving back a room &#125;//on success, it can't be oversized. *q = value; //don't forget add up its length. ++L.length; return 1; &#125; &#125; 11. to delete an expected element of the list,if done return 1; or return 0.1234567891011int delete_elem(SeqList &amp;L; int s_num)&#123; if (!L.data || L.length == 0 || s_num &lt; 1; s_num &gt; L.length) exit(0); DataList *p; if ( p = L.data+s_num; p &lt; L.data+L.length-1; ++p)&#123; *(p-1) = *p; &#125; //on suceess --L.length; return 1;&#125; Reflection: A BIG-highlightthe difference between ++i and i++; it’s mainly about the order of operationsfor a ‘for’ loop, either worksbut prefix(pre increment)seems more commonbecause you won’t go wrong using it.butlike post increment(AKA suffix/postfix)it’s more like, it returns the original value that it held before being incremented.","categories":[],"tags":[{"name":"algorithms","slug":"algorithms","permalink":"http://yoursite.com/tags/algorithms/"}]},{"title":"EnglishReviews","slug":"English-Reviews","date":"2019-03-17T14:37:01.000Z","updated":"2020-01-27T06:03:18.563Z","comments":true,"path":"2019/03/17/English-Reviews/","link":"","permalink":"http://yoursite.com/2019/03/17/English-Reviews/","excerpt":"","text":"English catalogue","categories":[],"tags":[]},{"title":"婴儿的初啼","slug":"婴儿的初啼","date":"2019-03-17T13:00:25.000Z","updated":"2020-01-27T06:03:18.564Z","comments":true,"path":"2019/03/17/婴儿的初啼/","link":"","permalink":"http://yoursite.com/2019/03/17/%E5%A9%B4%E5%84%BF%E7%9A%84%E5%88%9D%E5%95%BC/","excerpt":"","text":"Hello world!!I’m here writing the first post on my blog site.… 好激动呀…OMG…","categories":[],"tags":[]}]}