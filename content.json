{"meta":{"title":"GaryLz","subtitle":"Footprints - \"keep curiosity as a child\"","description":"Digest, Reflection, Sharing","author":"Gary.Leung","url":"http://yoursite.com","root":"/"},"pages":[{"title":"about","date":"2019-03-17T12:52:38.000Z","updated":"2020-01-27T06:03:18.564Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"Hello, Lucky one, welcome to my blog. I&apos;m Gary, a student from China. The very frist of impulse I setting up this site, is to *sharing* something with myself.(i.e.learning, thoughts, ideas, and moods). In some ways, letting you knows a little about me, even though you didn&apos;t know me at all. Whatsoever, just pretend that it&apos;s for one guy to talk to himself like a diary. It&apos;s worth recording, especially for myself. Anyway, just like a quote I give to myself, Keep curious just like a child. ---大家好， 想必大家可能知道我是谁。 欢迎大家来到我的博客。/骄傲脸 建立这个博客，前前后后折腾了大概大半年时间。 之所以建立这个博客，是因为如今生活太过嘈杂焦虑。想有个地方，时常安静地写些东西，无聊低落时随时随地都可以看到——原来自己也挺不错。/毕竟自己内心还是个喜好安静的人。 在这里，我时常分享一些关于自己的一些杂七杂八。（更多地关于学习的总结。） 一个记录自己一点一滴的小站。 written by Gary, night, Apr.3rd,19"},{"title":"categories","date":"2019-03-17T12:53:54.000Z","updated":"2020-01-27T06:03:18.564Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":"CS overview on my mojor field skills I’ve picked up algrithms survival-git manual (先挖坑儿) … English Poems … book digests (critically serious) Life booklist movielist playlist of songs hobby, useful skills Self my own framework of Priciple&amp;Rules coverage&amp;refinement- how to do a deduction and compression. like zhihu, evernote, pocket(facing info-overwhelming era) ####Apr.6-7th to-do list the algorithms of the first 4 chapters git reflections on the first month of this semester at school. critical reviews as to some favorable documentaries. a summary or report on my ideal development"},{"title":"tags","date":"2019-03-17T12:56:16.000Z","updated":"2020-01-27T06:03:18.565Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":"Poems Algorithms"}],"posts":[{"title":"Node.js-setup-on-Mac","slug":"Node.js-setup-on-Mac","date":"2020-03-16T06:57:06.000Z","updated":"2020-03-16T12:01:49.674Z","comments":true,"path":"2020/03/16/Node.js-setup-on-Mac/","link":"","permalink":"http://yoursite.com/2020/03/16/Node.js-setup-on-Mac/","excerpt":"Node.js Setup on Mac 昨天晚上，受够去年装乱七八糟的Node.js, 打算重装了Node.js。虽然这过程里也有点波折。 记录以警示后来人少走弯路。 整个流程是这样子滴。 nvm(Homebrew) -&gt; node(npm) -&gt; hero-cli","text":"Node.js Setup on Mac 昨天晚上，受够去年装乱七八糟的Node.js, 打算重装了Node.js。虽然这过程里也有点波折。 记录以警示后来人少走弯路。 整个流程是这样子滴。 nvm(Homebrew) -&gt; node(npm) -&gt; hero-cli 大致分为三步走。如果你用Mac没装Homebrew,那请上 homebrew官网安装 Friendly-note: 由于这片土地的特殊性，以及防止遇到一些奇奇乖乖的出错，最好自备科学上网环境，以及终端走代理技能。 两个坑：1）brew装nvm，重启终端后nvm失效 2）终端重启后，通过nvm安装的node、npm失效 安装nvm装完homebrew，如果你成功的话。 安装nvm，十分简单。只需要一句话。 1brew install nvm #这里会自动执行brew update命令，然后执行该命令。 由于外网，update整个过程需要等很久。大概要3-4分钟，甚至更久。所以，耐心等待，切不要重蹈我以前的覆辙，莽断地按下Ctrl+C结束。这会导致很严重的后果—可能再也运行不了brew命令。所以，最好走代理。 安装成功后，会有一个bug, 坑1: brew装nvm，重启终端后nvm失效brew安装nvm有个bug，安装时缺少了nvm.sh，这会导致每次重启终端，nvm命令就失效了，所以我们要每次运行下面的命令： 123// 复制下面的代码到终端并运行export NVM_DIR=~/.nvmsource $(brew --prefix nvm)/nvm.sh 好了，现在nvm命令已经能被识别了，但是每次重启终端都要运行无疑是很复杂的，所以要在.bash_profile（～/.zshrc）中配置一下，保证每次重启时，系统都能帮我们做一步。 1234#edit on .bash_profile#setup NVM_DIRexport NVM_DIR=\"~/.nvm\"source $(brew --prefix nvm)/nvm.sh 测试是否成功 1nvm -v #显示版本号 安装node以及配置这部分，应该算是最曲折的。 使用nvm安装node安装node,命令依次是 12345nvm ls-remote # 查看当前提供node版本号nvm install v8.11.3 # 自由选择 我选择了stable版本# 安装完成后就可以查看node和npm的版本了node -v npm -v npm直接跟着node一起去安装进去，虽然两者没什么依赖关系。 安装过程较慢，特别是安装node,得有耐心等待⌛️ 坑2：终端重启后，通过nvm安装的node、npm失效重启终端之后，node和npm也失效了. 不要急着关掉终端！！！ 这是因为nvm没有默认绑定node的版本号，所以要手动绑定一下。 如果你还没有重启，node和npm命令还有效，那么直接运行下面的命令，如果已经无效，先重新用nvm安装node 12345nvm use v8.11.3 #设置默认版本号#绑定默认版本号,稳定版本号nvm alias default v8.11.3 nvm alias stable v8.11.3 #如果下载的不是stable版的话，需要此条命令nvm ls 然后check一下，看到如下截图 例外情况Note: 而我的情况，并没有遵循上面所说那样，下载个node稳定版v8.11.3,相反下载了lts/carbon项目最新版，之后就出现没有全绑定问题，即stable版本并没有使用默认版，相反使用node原先预设的v11.3.0。 应该使用 nvm alias stable v8.17.0命令解决 这样子, node的配置已经完成。 安装hexo-cli一条命令，搞掂。 1npm install -g hexo-cli #全局安装 不过下载有点慢，建议代理！ 安装完后，check下是否安装成功 1hexo -v #版本信息 有些人，可能会出现”command not found”的问题。如果安装完成的话，可能就是下到node另一个版本的node-modules文件夹去了。npm下载插件，默认存到当前系统node稳定版上去。所以说，如果出现该问题，最好检查下。(其中，/bin/hexo-二进制可执行文件，即命令。没有它，就会出现”命令不存在”的报错。) 解决：放回文件的正确位置。尝试把 node-modules/hexo-cli 和 ../bin/hexo 两个全部移入当前使用的node版本去。 （特别对于那些.nvm/version/文件夹下存在多个node版本的人来说，或者上面node绑定时，没有出现上面三个全绿的截图。) 参考资料 segmentfault-一篇文章了解Mac上Node环境配置 Mupceet-Hexo 博客搭建与主题配置（零基础版）","categories":[],"tags":[{"name":"Node.js, Mac","slug":"Node-js-Mac","permalink":"http://yoursite.com/tags/Node-js-Mac/"}]},{"title":"hexo-backup","slug":"hexo-backup","date":"2020-03-16T04:41:44.000Z","updated":"2020-03-16T12:00:20.429Z","comments":true,"path":"2020/03/16/hexo-backup/","link":"","permalink":"http://yoursite.com/2020/03/16/hexo-backup/","excerpt":"hexo backup &amp; restore 项目初衷：我们想要解决在不同电脑上都能维护博客或配置、发布的内容丢失可恢复的问题。 这篇文章“鸽”了有很长一段时间, 昨天晚上刚好mac-pro重装node.js，顺便走了一遍-恢复hexo博客。 blog-backup， 主要分为三部分: 备份到github上托管， 安装配置Node.js，恢复博客。","text":"hexo backup &amp; restore 项目初衷：我们想要解决在不同电脑上都能维护博客或配置、发布的内容丢失可恢复的问题。 这篇文章“鸽”了有很长一段时间, 昨天晚上刚好mac-pro重装node.js，顺便走了一遍-恢复hexo博客。 blog-backup， 主要分为三部分: 备份到github上托管， 安装配置Node.js，恢复博客。 备份到GitHub首先，先分析hexo生成静态网页，部署到GitHub-repository的内容。 我们不难发现：部署的文件内容，其实是./public文件夹下的所有内容。事实上，插件hexo-deploy-git通过COPYhexo-gernerate后的public文件内容到.deploy_git文件夹下，然后push到远程分支origin/master上完成网站的部署。 所以，我们的备份思路上，不妨上传blog文件夹下必要的文件即可。Plus, Git可以使用不同分支管理不同的内容，因此，我们就可以考虑使用GIt的分支来备份所有的文件。 但是，具体哪些是必要的呢？最简单粗暴的方法，当然是备份整个文件夹。但是，身为心理洁癖，有点强迫症患者来说，始终心里觉得怪怪的。 于是，得稍微分析hexo-blog不同文件夹的作用。 分析hexo-blog文件夹先看hexo-blog文件夹下的文件结构 123456789101112131415.├── README.md├── _config.yml├── db.json├── hello-world.md├── node_modules├── package-lock.json├── package.json├── public├── scaffolds├── source├── themes└── to-do.md5 directories, 7 files 以下文件或者文件夹的作用： _config.yml文件： 站点配置文件，很多功能，插件配置都需要在此页面修改。 node_modules文件夹：hero-blog所依赖的模块 package.json文件：依赖的模块列表 package-lock.json文件：依赖的模块安装记录（由npm 根据package.json文件而生成) public文件夹：hexo-generate 根据public文件夹里的.md文件而生存的静态文件 scaffolds文件夹：包含模版(post, page, tag等)，blog-customization可对其模版进行修改 source文件夹：包含所有源文件(.md)，这是最重要的内容之一 themes文件夹：所有博客的主题文件夹(其中，landscape是默认主题)，其他的主题文件夹需要git-clone ⚠️：themes文件夹比较特殊，不是直接使用git add进行备份,因为通常themes都是由其他开发者进行开发维护，属于git-submodule。Git默认是直接跳过备份。因此我们需要通过git submodule add进行在hexo-backup分支上的.gitmodules的添加记录。 那另外的 .gitmodules 作用又是什么呢？其实 hexojs/hexo-starter 是通过 Git 的 Submodule 功能来管理主题模块，本身仓库并不备份主题文件。 其实我们对于主题文件的备份有两个方案：一个方案是将其内容全部上传进行备份。一方面可以保证原主题的更新不会影响你原先配置的效果，另一方面，主题可能在进行配置的时候还需要下载一些额外的库，直接上传可以避免再次下载这些内容和配置。另一个方案是像 hexo-starter 仓库一样通过 Git-submodule 功能来管理，这样可以进行主题的更新。 相较于 Hexo 初始化使用的仓库的备份列表，它的仓库是 hexojs/hexo-starter。 其备份列表 1234567scaffoldssourcethemes.gitignore.gitmodules_config.ymlpackage.json 对比一下，它抛弃了： node_modules &amp; package-lock.json：这两部分内容，只要保留 package.json，执行 npm install 就可以下载、生成。 public：执行 hexo g 即可根据源文件生成网页内容。 这些可重新生成的文件都可以不上传，因为它们只要使用特定的操作即可恢复。 因此，最终备份文件列表 12345678910scaffoldssourcethemesthemes_custom/next(存放对应主题修改的备份).gitignore.gitmodules_config.ymlpackage.json#这样子我们同步之后，只需要对比一下把这些配置应用过去就可以快速完成对主题的配置。 具体操作 修改.gitignore文件，添加忽略名单 12345678.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/package-lock.json 执行一下命令，在本地仓库创建hexo-backup分支 12345678910cd hexo-bloggit init #初始化空的Git仓库 hexo-blog/.gitgit checkut -b hexo-backup #创建分支并跳转该分支git submodule add https://github.com/theme-next/hexo-theme-next.git themes/next #添加位于 'themes/next' 的现存仓库到索引...git add . git commit -m \"init blog backup\" Last but not least, git branch -m master hexo-backup #重命名默认分支master 推送远程仓库 12git remote add origin git@github.com:GaryLz/GaryLz.github.io.gitgit push #自动创建同名的远程分支 hexo-backup(首次push的话，git push origin) 普及一点，在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系（tracking）。比如，在git clone的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的master分支自动”追踪”origin/master分支。 Git也允许手动建立追踪关系。 1git branch --set-upstream master origin/next 上面命令指定master分支追踪origin/next分支。 选自 阮一峰-Git远程操作详解 选做 我们可以删除不使用的主题 landscape 或者把主题路径添加到忽略列表中。 创建 themes_custom/next 文件夹，将对主题进行的配件修改的文件拷贝一份到这里 到Github上check一下，是否备份成功。如果有必要的话，最好将hexo-backup分支替换master分支，设置为Default-branch，方便往后的备份恢复。 master分支就仅仅存着hexo-blog的静态网页，实在没什么必要设置为默认，而且并不会影响hexo d -g的使用。 安装配置Node.js 昨晚刚好重装Nodejs,期间过程还有前任的指引，不算太过于曲折。想起第一次弄Node.js+hexo，那其中被各种出错所支配的恐惧😱，真的是一言难尽。 篇幅有点长，不如调转另一博客，Node.js setup on Mac 恢复博客备份在手，装好Node.js。之后，恢复就难以相信的简单啦。 恢复在另一台电脑上，恢复就几个命令操作 123456mkdir hexo-blog #新建一个文件夹，恢复备份cd hexo-bloggit clone git@github.com:GaryLz/GaryLz.github.io.git .#克隆默认远程分支hexo-backup上的备份，如果hexo-backup分支不是默认分支，需要加flag `-b hexo-backup`npm install #根据package.json，安装hexo-blog需要的依赖包，生成package-lock.json文件 测试1234567hexo ghexo shexo d#最后测试,正常更新博客hexo s -ghexo d -g 大家搭建好博客之后，千万别忘记备份哦:&lt;3 其他问题讲诉个亲身遇到的奇怪问题。 成功恢复后，尝试hexo-blog更新一则post,看是否功能正常。 但是我遇到一个问题：使用hexo-deploy-git成功push到origin/master分支后，会出现清空过去master分支上的所有commits。 Why? 其实在写博客时候，回顾deploy的原理。事实上，插件hexo-deploy-git通过COPYhexo-gernerate后的public文件内容到.deploy_git文件夹下，然后push到远程分支origin/master上完成网站的部署。 但是我又在.gitignore文件，添加了 deploy*/ 到忽略名单。 即deploy-git的追踪并没有备份下来。所以，别的电脑恢复后，执行 hexo d 之类的命令，会在本地初始化一个 .git文件夹，新建一个新的master分支，然后push到origin/master，导致之前原有的origin/master分支被清空（替代)。 参考资料 Mupceet-Hexo 博客备份与恢复 segmentfault-一篇文章了解Mac上Node环境配置 Mupceet-Hexo 博客搭建与主题配置（零基础版）","categories":[],"tags":[{"name":"hexo, backup","slug":"hexo-backup","permalink":"http://yoursite.com/tags/hexo-backup/"}]},{"title":"2020","slug":"2020","date":"2020-03-14T06:58:46.000Z","updated":"2020-03-15T17:25:58.756Z","comments":true,"path":"2020/03/14/2020/","link":"","permalink":"http://yoursite.com/2020/03/14/2020/","excerpt":"2020送给自己的第一句话 2020， 注定是未来十年中绝不平常的一年 从2019， 再到2020，一年过去了。","text":"2020送给自己的第一句话 2020， 注定是未来十年中绝不平常的一年 从2019， 再到2020，一年过去了。 个人也非常感慨—— 自己，从一个啥事都非常好奇，凭着一腔热情瞎折腾，再到现在，凡事思前想后，生怕走错路的自己。 那年的热情不在，只留下苍白无力的现实。 2020年，开局不利。Cornorvirus outbreak, market crash, Kobe Bryant passed away, so on… Maybe I could be one of the jobless.(the US is in the best of the history, or China is stuck in economy slowdown.) So sad but that is life.","categories":[],"tags":[]},{"title":"How Do I Love Thee","slug":"How-Do-I-Love-Thee","date":"2019-04-03T13:45:25.000Z","updated":"2020-03-16T07:44:24.254Z","comments":true,"path":"2019/04/03/How-Do-I-Love-Thee/","link":"","permalink":"http://yoursite.com/2019/04/03/How-Do-I-Love-Thee/","excerpt":"How Do I Love Thee written by Elizabeth Barrett Browning How do I love thee? Let me count the ways.","text":"How Do I Love Thee written by Elizabeth Barrett Browning How do I love thee? Let me count the ways. I love Thee to the depth and breath and height my Soul can reach,when feeling out of Sight, for the ends of Being and ideal Grace. I love thee to the level of everyday’s Most quiet need, by sun and candlelight. I love thee freely, as men strive for Right; I love thee purely, as they turn from Praise. I love thee with the Passion put to use in my old griefs, and with my childhood’s faith. I love thee with a love I seemed to lose with my lost saints, I love thee with the breath, smiles, tears, of all my life and, if God choose, I shall but love thee better after death.","categories":[],"tags":[]},{"title":"Charlie's Last Letter","slug":"Charlie-s-Last-Letter","date":"2019-03-23T02:44:35.000Z","updated":"2020-01-27T06:03:18.563Z","comments":true,"path":"2019/03/23/Charlie-s-Last-Letter/","link":"","permalink":"http://yoursite.com/2019/03/23/Charlie-s-Last-Letter/","excerpt":"Charlie’s Last Letter from MOVIE The Perks Of Being A Wallflower I don’t know if I will have the time to write any more letters. Because I might be too busy trying to paticipate.","text":"Charlie’s Last Letter from MOVIE The Perks Of Being A Wallflower I don’t know if I will have the time to write any more letters. Because I might be too busy trying to paticipate. So, it this does end up being the last letter. I just want to tell you that I was in a bad place before I started high school And you helped me. Even if you didn’t know what I was talking about or know someone who’s gone through it And it made me not feel alone. Because I know there’re people who say all these things don’t happen there’re people who forget what it’s like to be 16when they turn 17. I know these will be all stories someday, And our picutures will become old photograph,s And we all will become someone’s mom or dad. But right now, these moments are not stories. This is happening. I’m here, and I’m looking at her. And she’s so beautiful. … I can see it, the one moment when you know you are not a sad stories, You’re alive. And you stand up and look at the lights on the building and everything that makes you wonder. And you were listening to that song on that drive with people you love most in this world. And in this moment, I swear, We are infinite.","categories":[],"tags":[{"name":"Poems","slug":"Poems","permalink":"http://yoursite.com/tags/Poems/"}]},{"title":"Algorithms of dynamic Sequential List","slug":"Algorithms-of-dynamic-Sequential-List","date":"2019-03-19T02:35:26.000Z","updated":"2020-01-27T06:03:18.563Z","comments":true,"path":"2019/03/19/Algorithms-of-dynamic-Sequential-List/","link":"","permalink":"http://yoursite.com/2019/03/19/Algorithms-of-dynamic-Sequential-List/","excerpt":"线性表顺序结构-动态to declare1234567891011#define LIST_INIT_SIZE 10;#define LIST_INCREMENT 5;//array can't apply for a new capacity//once it was defined.typedef struct &#123; DataList *data; int length; int datasize //to note the current capacity that has been occupied. // to judge if apply for a new capacity if it's full. &#125; SeqList","text":"线性表顺序结构-动态to declare1234567891011#define LIST_INIT_SIZE 10;#define LIST_INCREMENT 5;//array can't apply for a new capacity//once it was defined.typedef struct &#123; DataList *data; int length; int datasize //to note the current capacity that has been occupied. // to judge if apply for a new capacity if it's full. &#125; SeqList 1. to initialize123456789int initList(SeqList &amp;L)&#123;//initialize memory allocation L.data = (DataList*)molloc(LIST_INIT_SIZE * sizeof(DataList)); if(!L.data) exit(0); L.length = 0; L.datasize = LIST_INIT_SIZE; return 0; //succeeded &#125; 2. to destroy all of member variables and recycle123456int destroyList(SeqList &amp;L)&#123; free(L.data); L.length = 0; L.datasize = 0; return 1;&#125; 3. to recyclethe process is the same as the above 4. to check if it’s empty123int checkEmpty(SeqList L)&#123; return !(L.length);&#125; 5. to get the length of the list123int getLength(SeqList L)&#123; return L.length;&#125; 6. to return the value of the n-th element123456DataList getElem(SeqList L, int n)&#123; if ( n &lt; 1 || n &gt; L.length ) return NULL; //you also can only consider the feasible situation return (*(L.data+i-1))&#125; 7. to return the index(AKA situation) of the given numberif it’s in the list, if succeed return 1, or return 0 1234567891011int getLocation(SeqList L, int num)&#123; if ( data &amp;&amp; L.length != 0 )&#123; //to ensure that pointer(data) or the list is not NULL int j;//default j=0; // to check if that given number is in the list while ( j &lt; L.length &amp;&amp; num != (*(data+j) ) j++; if ( j != L.length) return j; else return -1; &#125;else return -1;&#125; 8. to get the value of its immediate successorif it exits by giving values 1234567891011DataList getI_suc(SeqList L, DataList values )&#123; if ( data &amp;&amp; L.length != 0 )&#123; int j; while ( j &lt; L.length-1 &amp;&amp; values != (*(L.data+j))) j++; if ( j ! = L.length-1) return (*(L.data+j+1)); &#125; return NULL;&#125; 9. to get…the value of its predecessor12345678910DataList getI_prede(SeqList L, DataList value)&#123; if ( L.data &amp;&amp; L.length != 0 )&#123; int j = 1; while ( j &lt; L.length &amp;&amp; values != (*(L.data+j))) j++; if ( j != L.length ) return (*(L.data+j-1)); &#125; return NULL;&#125; 10. ATTENTIONinsert a given value before an expected element of the list 123456789101112131415161718192021222324252627282930313233343536int insertBef(SeqList &amp;L, DataList value, int i)&#123; //need to note here, applying for a new room for the value if feasible** if ( !L.data || L.length = 0 || i &lt; 1 || i &gt; L.length ) return -1; DataList *newbase, *q, *p; //p,q that two being used into operation of putting backward other elements //need to note here - function remolloc() just change its memory size(AKA resize the memory block), doesn't change its values that inside the original memory. //check if the block of memory is full now if ( L.length == L.datasize )&#123; //L.length --&gt; means the size of memory using now newbase = (DataList*)remolloc(L.data, (L.datasize + LIST_INCREMENT)*(sizeof(DataList))); //apply for room for value to be saved //what if failing to allocate the requested memory block, a null pointer is returned //appendix - dereference means “取指针所指向的对象的值” in Chinese. (AKA star sign(*)) if ( !newbase ) exit(0); //terminate in advance ##reallyUsefulTrick## //on success L.datasize += LIST_INCREMENT; L.data = newbase; //new address &#125; //expected element and those behind need to move backwards, //the process starts with the last one. //NOTE: why need two pointers like p, q. // because all elements need being pointed by pointers. //so, we need two to deal with the process of offering a room for that value waiting to insert // and one of both to point that empty room q = L.data+i-1; //let the pointer q point to that room(by passing on the address) for ( p = L.data+L.length-1; p &gt; i; --p )&#123; *(p+1) = *p; //moving back a room &#125;//on success, it can't be oversized. *q = value; //don't forget add up its length. ++L.length; return 1; &#125; &#125; 11. to delete an expected element of the list,if done return 1; or return 0.1234567891011int delete_elem(SeqList &amp;L; int s_num)&#123; if (!L.data || L.length == 0 || s_num &lt; 1; s_num &gt; L.length) exit(0); DataList *p; if ( p = L.data+s_num; p &lt; L.data+L.length-1; ++p)&#123; *(p-1) = *p; &#125; //on suceess --L.length; return 1;&#125; Reflection: A BIG-highlightthe difference between ++i and i++; it’s mainly about the order of operationsfor a ‘for’ loop, either worksbut prefix(pre increment)seems more commonbecause you won’t go wrong using it.butlike post increment(AKA suffix/postfix)it’s more like, it returns the original value that it held before being incremented.","categories":[],"tags":[{"name":"algorithms","slug":"algorithms","permalink":"http://yoursite.com/tags/algorithms/"}]},{"title":"EnglishReviews","slug":"English-Reviews","date":"2019-03-17T14:37:01.000Z","updated":"2020-01-27T06:03:18.563Z","comments":true,"path":"2019/03/17/English-Reviews/","link":"","permalink":"http://yoursite.com/2019/03/17/English-Reviews/","excerpt":"","text":"English catalogue","categories":[],"tags":[]},{"title":"婴儿的初啼","slug":"婴儿的初啼","date":"2019-03-17T13:00:25.000Z","updated":"2020-01-27T06:03:18.564Z","comments":true,"path":"2019/03/17/婴儿的初啼/","link":"","permalink":"http://yoursite.com/2019/03/17/%E5%A9%B4%E5%84%BF%E7%9A%84%E5%88%9D%E5%95%BC/","excerpt":"","text":"Hello world!!I’m here writing the first post on my blog site.… 好激动呀…OMG…","categories":[],"tags":[]}]}